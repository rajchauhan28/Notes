/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => revealExplorerFile
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var revealExplorerFileSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Reveal Explorer File" });
    const content = `<p>Repository: \u{1F334} <a href="https://github.com/1C0D/Obsidian-Reveal-File-in-explorer">1C0D/Obsidian-Reveal-File-in-explorer</a> \u{1F334}</p>`;
    containerEl.createDiv("", (el) => {
      el.innerHTML = content;
    });
    containerEl.createEl("h4", { text: "On header title clicking" });
    this.createToggle(
      containerEl,
      "Fold when clicking title",
      "When clicking title, close all folders where the file is not in",
      "foldOtherDirsBefore"
    );
    containerEl.createEl("h4", { text: "On file opening" });
    this.createToggle(
      containerEl,
      "Reveal when opening file",
      "When opening a file, it will reveal it",
      "revealOnOpen",
      true
    );
    if (this.plugin.settings.revealOnOpen) {
      this.createToggle(
        containerEl,
        "Fold when opening file",
        "When opening a file, it will also fold other folders",
        "foldWhenOpen"
      );
      this.createToggle(
        containerEl,
        "Enable Reveal when opening file from Explorer",
        "If disabled, the reveal will only happen using quick switcher",
        "enableRevealExplorer"
      );
      new import_obsidian.Setting(containerEl).setName("Excluded Folders from reveal on opening").setDesc(
        "Comma-separated list of Folders(case sensitive) to exclude from being revealed on opening. You can use 'copy file path' in the palette to get the path, but don't forget to delete the filename from the path. "
      ).addText(
        (text) => text.setPlaceholder(
          "folder/subfolder, folder, ..."
        ).setValue(this.plugin.settings.excludedFolders).onChange(async (value) => {
          this.plugin.settings.excludedFolders = value;
          await this.plugin.saveSettings();
        })
      );
    }
  }
  createToggle(containerEl, name, desc, prop, display) {
    new import_obsidian.Setting(containerEl).setName(name).setDesc(desc).addToggle(
      (bool) => bool.setValue(this.plugin.settings[prop]).onChange(async (value) => {
        this.plugin.settings[prop] = value;
        await this.plugin.saveSettings();
        this.plugin.reveal();
        if (display) {
          this.display();
        }
      })
    );
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  foldOtherDirsBefore: true,
  revealOnOpen: true,
  foldWhenOpen: true,
  excludedFolders: "",
  enableRevealExplorer: true
};
var revealExplorerFile = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.disableRevealExplorer = false;
    this.reveal = () => {
      const { workspace } = this.app;
      const containerEl = workspace.containerEl.win;
      this.registerDomEvent(containerEl, "click", this.clickHandler, true);
      this.registerEvent(
        workspace.on(
          "file-open",
          this.onFileOpen
        )
      );
    };
    this.onFileOpen = async () => {
      if (this.settings.revealOnOpen && !this.disableRevealExplorer) {
        const { workspace } = this.app;
        const activeView = workspace.getActiveViewOfType(import_obsidian2.View);
        const path = activeView.leaf.getViewState().state.file;
        const same = this.oldPath ? this.oldPath === path : false;
        this.oldPath = path;
        if (!this.is_view_explorer_open() || this.pathIsExcluded(path) || same) {
          return;
        }
        if (this.settings.foldWhenOpen) {
          await this.fold();
        }
        const revealPromise1 = this.app.commands.executeCommandById("file-explorer:reveal-active-file");
        const revealPromise2 = this.app.commands.executeCommandById("file-explorer:reveal-active-file");
        await Promise.all([revealPromise1, revealPromise2]);
        setTimeout(
          async () => {
            this.app.workspace.setActiveLeaf(activeView.leaf, {
              focus: true
            });
          },
          50
        );
      } else {
        setTimeout(async () => {
          this.disableRevealExplorer = false;
        }, 200);
      }
    };
    this.clickHandler = async (evt) => {
      var _a;
      const clickedElement = evt.target;
      const isFileExplorer = clickedElement.classList.contains("tree-item-self") && clickedElement.classList.contains("nav-file-title") || clickedElement.classList.contains("tree-item-inner") && clickedElement.classList.contains("nav-file-title-content");
      if (clickedElement == null ? void 0 : clickedElement.classList.contains("view-header-title")) {
        const { workspace } = this.app;
        const activeView = workspace.getActiveViewOfType(import_obsidian2.View);
        const isNewTab = (activeView == null ? void 0 : activeView.getDisplayText()) === "New tab";
        if (isNewTab) {
          return;
        }
        if (this.settings.foldOtherDirsBefore) {
          await this.fold();
        }
        await this.app.commands.executeCommandById(
          "file-explorer:reveal-active-file"
        );
        await this.app.commands.executeCommandById("editor:focus");
        const titleContainerEl = (_a = activeView == null ? void 0 : activeView.containerEl) == null ? void 0 : _a.querySelector(".view-header-title");
        setTimeout(() => {
          titleContainerEl == null ? void 0 : titleContainerEl.focus();
        }, 50);
      } else if (this.settings.revealOnOpen && !this.settings.enableRevealExplorer && isFileExplorer) {
        this.disableRevealExplorer = true;
        const { parentElement } = clickedElement;
        if (parentElement) {
          const clickEvent = new Event("click");
          parentElement.dispatchEvent(clickEvent);
        }
      }
    };
    this.fold = async () => {
      var _a;
      const { workspace } = this.app;
      const fileExplorer = (_a = workspace.getLeavesOfType("file-explorer")) == null ? void 0 : _a.first();
      const activeView = workspace.getActiveViewOfType(import_obsidian2.View);
      if ((activeView == null ? void 0 : activeView.getDisplayText()) === "New tab") {
        return;
      }
      const files = Object.entries((fileExplorer == null ? void 0 : fileExplorer.view).fileItems);
      for (const [path, fileItem] of files) {
        if (path === "/") {
          continue;
        }
        const isFold = fileItem.file instanceof import_obsidian2.TFolder;
        if (isFold) {
          await fileItem.setCollapsed(true);
        }
      }
    };
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new revealExplorerFileSettingsTab(this.app, this));
    this.app.workspace.onLayoutReady(() => {
      this.reveal();
    });
  }
  is_view_explorer_open() {
    const { workspace } = this.app;
    let is_open = false;
    workspace.iterateAllLeaves((leaf) => {
      if (leaf.getViewState().type == "file-explorer" && leaf.width > 0) {
        is_open = true;
      }
    });
    return is_open;
  }
  pathIsExcluded(path) {
    const excludedFolders = this.settings.excludedFolders;
    if (!this.settings.revealOnOpen || !excludedFolders)
      return false;
    const newList = excludedFolders.split(",").map((x) => x.trim().replace(/^\/+|\/+$/g, "")).filter((x) => x !== "");
    return newList.some((value) => path == null ? void 0 : path.startsWith(value));
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
